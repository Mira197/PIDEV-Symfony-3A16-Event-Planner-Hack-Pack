	{# templates/aya_order/aya_order.html.twig #}
	{% extends 'base.html.twig' %}

	{% block stylesheets %}

		<link rel="stylesheet" href="{{ asset('assetsAya/css/ordercss.css') }}">
		{{ parent() }}
		<style>
			nav.fh5co-nav {
				background-color: #cebec9 !important;
				padding: 1px 0 !important;
				max-height: 130px !important;
			}

			body {
				background-color: #f7f7f7;
			}

			.order-form-container {
				max-width: 600px;
				margin: 150px auto 60px; /* ‚Üê top √©loign√© */
				padding: 40px;
				background: #fff;
				box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
				border-radius: 20px;
			}

			.order-form-container h2 {
				font-weight: bold;
				margin-bottom: 25px;
				text-align: center;
				color: #6b336e;
			}

			.form-group label {
				font-weight: 600;
			}

			.btn-success {
				width: 100%;
			}
			/* Appliquer une bordure rouge nette aux champs invalides */
			.is-invalid {
				border: 2px solid #dc3545 !important;
				background-color: #fff6f6 !important;
				border-radius: 5px;
			}

			.is-invalid:focus {
				box-shadow: 0 0 5px rgba(220, 53, 69, 0.4);
			}
			select:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none; /* üî• important */
    transition: opacity 0.5s ease;
}

		</style>
	{% endblock %}

	{% block content %}
		<div class="container mt-5">
			<div
				class="row aya-order-wrapper justify-content-center">
				<!-- üßæ Formulaire commande -->
				<div class="col-md-7">
					<div class="order-form-container">
						<h2 class="mb-4 text-center">üßæ Validate Your Order</h2>
						{{ form_start (form, {'attr': {'novalidate': 'novalidate', 'id': 'order_form'}}) }}
						<input type="hidden" id="final_total_field" name="final_total" value="{{ total }}">
						<div class="form-group">
							{{ form_label(form.exact_address) }}
							{{ form_widget(form.exact_address, {'attr': {'class': 'form-control' ~ (form_errors(form.exact_address) ? ' is-invalid' : ''),'placeholder': 'Enter exact delivery address'}}) }}
							{{ form_errors(form.exact_address) }}
						</div>
						<div class="form-group mt-3">
							{{ form_label(form.event_date) }}
							{{ form_widget(form.event_date, {'attr': {'class': 'form-control' ~ (form_errors(form.event_date) ? ' is-invalid' : '')}}) }}
							{{ form_errors(form.event_date) }}
						</div>
						<div class="form-group mt-3">
							{{ form_label(form.payment_method) }}
							{{ form_widget(form.payment_method, {'attr': {'class': 'form-control' ~ (form_errors(form.payment_method) ? ' is-invalid' : ''),
			'id': 'order_payment_method'}}) }}
							{{ form_errors(form.payment_method) }}
						</div>
						<button type="submit" class="btn btn-success mt-4 w-100">Confirm Order</button>
						{{ form_end(form) }}
					</div>
				</div>

				<!-- üí≥ Section coupon & options -->
				<div class="col-md-5 ">
					<div class="order-summary-box">
						<div class="form-group">
							<label>Coupon Code</label>
							<div class="input-apply-group">
								<input type="text" class="form-control coupon-input" placeholder="Enter coupon">
								<button class="btn btn-secondary apply-btn" id="apply-coupon">Apply</button>
							</div>

						</div>

	{# 
						<div class="form-group mt-4">
							<label>Gift Card</label>
							<div class="d-flex giftcard-row align-items-center">
								<input type="text" class="form-control card-input me-2" placeholder="Card Number">
								<input type="text" class="form-control pin-input me-2" placeholder="PIN">
								<button class="btn btn-secondary apply-btn" id="apply-giftcard">Apply</button>
							</div>
						</div> #}


						<div class="form-group mt-4">
							<label>Wallet Credit</label>
							<div class="input-apply-group">
								<input type="text" class="form-control wallet-input" placeholder="Enter amount">
								<button class="btn btn-secondary apply-btn" id="apply-wallet">Apply</button>
							</div>
						</div>


						<div class="form-group mt-4">
							<label>3alakifi Points
								<small>(Total: 0)</small>
							</label>
							<div class="input-apply-group">
								<input type="text" class="form-control alakifi-input" placeholder="Enter points">
								<button class="btn btn-secondary apply-btn" id="apply-points">Apply</button>
							</div>
						</div>
						<div class="line d-flex justify-content-between" style="font-size: 1.3em; font-weight: bold; color: #6b336e;">
			<span>üèÅ Total</span>
			<span id="final-total">{{ total|number_format(2, '.', ' ') }} TND</span>
		</div>
					</div>
				</div>

				</div>


			</div>
		</div>
	{% endblock %}
	{% block javascripts %}
		{{ parent() }}
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> {# SweetAlert2 CDN #}

		<script>
		document.addEventListener('DOMContentLoaded', function () {
			const initialTotal = parseFloat('{{ total|default(0)|replace({",": "."}) }}') || 0;
	sessionStorage.setItem('initial_total', initialTotal);
	sessionStorage.setItem('current_total', initialTotal);
	console.log('Initial Total Loaded:', initialTotal);
	console.log('current_total', initialTotal);
	sessionStorage.setItem('initial_total', initialTotal);
	togglePaymentMethod(initialTotal);

			// Fonction g√©n√©rale pour afficher SweetAlert TOAST ou Popup
	function showAlert(icon, title, text, useToast = false) {
		if (useToast) {
			return Swal.fire({
				toast: true,
				position: 'top-end',
				icon: icon,
				title: title,
				showConfirmButton: false,
				timer: 2500,
				timerProgressBar: true,
				background: '#fff',
				color: '#333',
				didOpen: (toast) => {
					toast.addEventListener('mouseenter', Swal.stopTimer)
					toast.addEventListener('mouseleave', Swal.resumeTimer)
				}
			});
		} else {
			return Swal.fire({ // üî• ajoute return ici
				icon: icon,
				title: title,
				text: text,
				confirmButtonColor: '#6b336e',
				backdrop: `rgba(107, 51, 110, 0.2)`,
			});
		}
	}

	function togglePaymentMethod(newTotal) {
		const paymentMethodSelect = document.getElementById('aya_order_payment_method');
		if (paymentMethodSelect) {
			if (newTotal <= 0) {
				paymentMethodSelect.disabled = true;  // ‚úÖ Correction ici
				paymentMethodSelect.style.opacity = '0.5';
				paymentMethodSelect.style.cursor = 'not-allowed';

				const emptyOption = paymentMethodSelect.querySelector('option[value=""]');
				if (emptyOption) {
					emptyOption.selected = true;
				}
			} else {
				paymentMethodSelect.disabled = false; // ‚úÖ Correction ici
				paymentMethodSelect.style.opacity = '1';
				paymentMethodSelect.style.cursor = 'default';
			}
		}
	}


			// üî• Fonction pour mettre √† jour le total
		function updateTotal() {
		let initialTotal = parseFloat(sessionStorage.getItem('initial_total') || 0);
		const couponDiscount = parseFloat(sessionStorage.getItem('coupon_discount') || 0);
		const walletUsed = parseFloat(sessionStorage.getItem('wallet_used') || 0);
		const giftCardAmount = parseFloat(sessionStorage.getItem('gift_card_amount') || 0);
		const pointsUsed = parseFloat(sessionStorage.getItem('points_used') || 0);

		let newTotal = initialTotal - couponDiscount - walletUsed - giftCardAmount - pointsUsed;
		if (newTotal < 0) newTotal = 0;

		console.log('new_total', newTotal);

		$('#final-total').text(newTotal.toFixed(2) + ' TND');
		document.getElementById('final_total_field').value = newTotal.toFixed(2);

		sessionStorage.setItem('current_total', newTotal);

		togglePaymentMethod(newTotal);

		return newTotal; // üî• Ajoute ce return
	}


			
	document.getElementById('order_form').addEventListener('submit', function(event) {
		event.preventDefault(); // on bloque l'envoi par d√©faut

		const finalTotal = parseFloat(document.getElementById('final_total_field').value) || 0;
		console.log('Total √† payer:', finalTotal);
		console.log('Wallet disponible:', walletCredit);

		if (walletCredit >= finalTotal) {
			// üü¢ Wallet suffit totalement
			Swal.fire({
				icon: 'success',
				title: 'Wallet Payment!',
				text: 'Your order will be fully paid with your Wallet Credit.',
				confirmButtonColor: '#6b336e'
			}).then(() => {
				// on d√©finit un flag pour savoir que c'est "wallet_only"
				sessionStorage.setItem('payment_mode', 'wallet_only');
				this.submit(); // envoyer le formulaire apr√®s confirmation
			});
		} else {
			// üü† Wallet insuffisant, proposer choix
			Swal.fire({
				title: 'Partial Wallet Payment',
				text: "Your Wallet Credit is not enough to cover the full amount. Choose how you want to pay:",
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: 'Wallet + Stripe',
				cancelButtonText: 'Pay All with Stripe',
				confirmButtonColor: '#6b336e',
				cancelButtonColor: '#6b336e'
			}).then((result) => {
				if (result.isConfirmed) {
					// üü° Choix Wallet + Stripe
					sessionStorage.setItem('payment_mode', 'wallet_plus_stripe');
					this.submit();
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					// üîµ Choix 100% Stripe
					sessionStorage.setItem('payment_mode', 'stripe_only');
					this.submit();
				}
			});
		}
	});



			// üî• Apply Coupon
			document.getElementById('apply-coupon').addEventListener('click', function () {
				const coupon = document.querySelector('.coupon-input').value;
				if (coupon.trim() === '') return showAlert('error', 'Error', 'Please enter a coupon code.');

				fetch('/aya/order/apply-coupon', {
					method: 'POST',
					body: new URLSearchParams({ coupon_code: coupon }),
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						sessionStorage.setItem('coupon_discount', data.discount);
						updateTotal();
						showAlert('success', 'Coupon Applied!', 'Your discount has been applied.');
					} else {
						showAlert('error', 'Invalid Coupon', data.message);
					}
				});
			});

			// üî• Apply Wallet
		document.getElementById('apply-wallet').addEventListener('click', function () {
		const amount = document.querySelector('.wallet-input').value;
		if (amount.trim() === '') return showAlert('error', 'Error', 'Please enter wallet amount.');

		fetch('/aya/order/apply-wallet', {
			method: 'POST',
			body: new URLSearchParams({ amount: amount }),
		})
		.then(response => response.json())
		.then(data => {
			if (data.success) {
				sessionStorage.setItem('wallet_used', data.applied);

				const newTotal = updateTotal(); // üî• ici on r√©cup√®re newTotal

				showAlert('success', 'Wallet Credit Applied!', 'You used ' + data.applied + ' TND.')
					.then(() => {
						togglePaymentMethod(newTotal); // üî• ici on utilise newTotal
					});

			} else {
				showAlert('error', 'Wallet Error', data.message);
			}
		});
	});



			// üî• Apply Points
			document.getElementById('apply-points').addEventListener('click', function () {
				const points = document.querySelector('.alakifi-input').value;
				if (points.trim() === '') return showAlert('error', 'Error', 'Please enter points.');

				fetch('/aya/order/apply-points', {
					method: 'POST',
					body: new URLSearchParams({ points: points }),
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						sessionStorage.setItem('points_used', data.applied);
						updateTotal();
						showAlert('success', 'Points Applied!', 'You used ' + points + ' points.');
					} else {
						showAlert('error', 'Points Error', data.message);
					}
				});
			});

			// üî• Apply GiftCard
			{% if false %}
			// D√©sactiv√© pour l‚Äôinstant car le champ giftcard n‚Äôest pas encore visible dans ton code
			document.getElementById('apply-giftcard').addEventListener('click', function () {
				const code = document.querySelector('.card-input').value;
				const pin = document.querySelector('.pin-input').value;
				if (code.trim() === '' || pin.trim() === '') return showAlert('error', 'Error', 'Please fill both Card Code and PIN.');

				fetch('/aya/order/apply-giftcard', {
					method: 'POST',
					body: new URLSearchParams({ code: code, pin: pin }),
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						sessionStorage.setItem('gift_card_amount', data.amount);
						updateTotal();
						showAlert('success', 'Gift Card Applied!', 'You used a Gift Card of ' + data.amount + ' TND.');
					} else {
						showAlert('error', 'Gift Card Error', data.message);
					}
				});
			});
			{% endif %}

		});
		</script>
	{% endblock %}

