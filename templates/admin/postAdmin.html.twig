{% extends 'admin/baseAdmin.html.twig' %}

{% block head %}
    <link rel="stylesheet" href="{{ asset('assetsAya/css/adminOrder.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    {{ parent() }}
    <style>
        .hidden-column {
            display: none;
        }
        .publication-img {
            width: 40px;
            height: auto;
            border-radius: 4px;
            margin-right: 8px;
        }
        .checkbox-item {
            transform: scale(1.2);
        }
        .pagination {
            justify-content: center;
            flex-wrap: wrap;
        }
        .page-item .page-link {
            color: #6b336e;
            border-radius: 6px;
            transition: all 0.2s ease;
            padding: 6px 12px;
            border: 1px solid #ddd;
        }
        .page-item .page-link:hover {
            background-color: #f2f2f2;
        }
        .page-item.active .page-link {
            background-color: #6b336e;
            border-color: #6b336e;
            color: white;
            font-weight: bold;
        }
        .page-item.disabled .page-link {
            color: #999;
            background-color: #f0f0f0;
            border-color: #ddd;
        }
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
            color: #6b336e;
        }
        .loading-spinner i {
            font-size: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block section %}
    <div class="admin-mui-wrapper">
        <h2>üì∞ Publications Management</h2>

        <div class="admin-filters">
            <div class="left-search">
                <input type="text" id="adminPublicationSearch" placeholder="üîç Search publications..." class="form-control">
            </div>
          {#  <div class="center-filters">
                <button class="status-filter active" data-filter="">All</button>
                <button class="status-filter" data-filter="Inappropriate">Inappropriate</button>
                <button class="status-filter" data-filter="Appropriate">Appropriate</button>
            </div>#}
            <div class="right-actions">
                <a href="{{ path('app_publication_new_admin') }}" class="btn btn-outline-secondary">‚ûï Add Post</a>
                <button type="submit" form="bulkDeleteForm" class="btn btn-outline-danger">üóëÔ∏è Delete Selected</button>
            </div>
        </div>

        <form method="post" id="bulkDeleteForm" action="{{ path('publication_bulk_delete') }}">
            <div id="publicationsContent">
                {% include 'admin/_publication_rows.html.twig' with { pagination: pagination } %}
            </div>
            <div class="loading-spinner" id="loadingSpinner">
                <i class="fas fa-spinner"></i> Loading...
            </div>
        </form>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.getElementById('bulkDeleteForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            const form = this;
            Swal.fire({
                title: 'Confirm deletion',
                text: 'Are you sure you want to delete the selected publications?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Delete',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit();
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('adminPublicationSearch');
            const filters = document.querySelectorAll('.status-filter');
            const checkAll = document.getElementById('checkAll');
            const loadingSpinner = document.getElementById('loadingSpinner');
            let currentFilter = '';
            let debounceTimeout;

            // Debounce function to limit AJAX requests
            function debounce(func, delay) {
                return function (...args) {
                    clearTimeout(debounceTimeout);
                    debounceTimeout = setTimeout(() => func.apply(this, args), delay);
                };
            }

            function fetchPublications(query = '', filter = '', page = 1) {
                // Show loading spinner
                loadingSpinner.style.display = 'block';
                document.getElementById('publicationsContent').style.opacity = '0.5';

                fetch(`{{ path('admin_publication_search') }}?q=${encodeURIComponent(query)}&status=${encodeURIComponent(filter)}&page=${page}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newContent = doc.querySelector('#publicationsContent');
                    if (newContent) {
                        document.getElementById('publicationsContent').innerHTML = newContent.innerHTML;
                    }
                    attachDeleteEvents();
                    attachPaginationEvents();
                    attachCheckAllEvent();
                })
                .catch(error => {
                    console.error('Error fetching publications:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Failed to fetch publications. Please try again.',
                        icon: 'error'
                    });
                })
                .finally(() => {
                    // Hide loading spinner
                    loadingSpinner.style.display = 'none';
                    document.getElementById('publicationsContent').style.opacity = '1';
                });
            }

            function attachPaginationEvents() {
                document.querySelectorAll('.pagination a').forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const url = new URL(this.href);
                        const page = url.searchParams.get('page') || 1;
                        fetchPublications(searchInput.value, currentFilter, page);
                    });
                });
            }

            function attachCheckAllEvent() {
                const checkAllCheckbox = document.getElementById('checkAll');
                if (checkAllCheckbox) {
                    checkAllCheckbox.addEventListener('change', function() {
                        const checkboxes = document.querySelectorAll('.checkbox-item');
                        checkboxes.forEach(checkbox => {
                            checkbox.checked = this.checked;
                        });
                    });
                }
            }

            searchInput.addEventListener('input', debounce(() => {
                fetchPublications(searchInput.value, currentFilter);
            }, 300));

            filters.forEach(btn => {
                btn.addEventListener('click', function () {
                    filters.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentFilter = this.dataset.filter;
                    fetchPublications(searchInput.value, currentFilter);
                });
            });

            function attachDeleteEvents() {
                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopImmediatePropagation();

                        const id = this.dataset.id;
                        const csrfToken = this.dataset.token;

                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'This publication will be deleted!',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, delete it!',
                            cancelButtonText: 'Cancel',
                            focusCancel: true
                        }).then((result) => {
                            if (result.isConfirmed) {
                                fetch(`/admin/publication/delete/${id}`, {
                                    method: 'POST',
                                    headers: {
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        _token: csrfToken
                                    })
                                })
                                .then(response => {
                                    if (!response.ok) throw new Error('Network response was not ok');
                                    return response.json();
                                })
                                .then(data => {
                                    if (data.success) {
                                        return Swal.fire('Deleted!', '', 'success');
                                    } else {
                                        throw new Error(data.message || 'Failed to delete');
                                    }
                                })
                                .then(() => {
                                    fetchPublications(searchInput.value, currentFilter);
                                })
                                .catch(error => {
                                    Swal.fire('Error', error.message, 'error');
                                    console.error('Error:', error);
                                });
                            }
                        });
                    });
                });
            }

            // Initial attachment of events
            attachDeleteEvents();
            attachPaginationEvents();
            attachCheckAllEvent();
        });
    </script>
{% endblock %}