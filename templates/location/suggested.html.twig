{% extends 'base.html.twig' %}

{% block title %}Suggested Venues
{% endblock %}
{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="{{ asset('css/suggested_venues.css') }}">
	<link rel="stylesheet" href="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.17.0/maps/maps.css" />
	<style>
		nav.fh5co-nav {
			background-color: #cebec9 !important;
			padding: 1px 0 !important;
			max-height: 170px !important;
		}
		.aya-cart-wrapper {
			padding: 30px;
			margin-top: 120px;
		}
	</style>
{% endblock %}

{% block content %}

	<div class="container aya-cart-wrapper">
		<div class="container">
			<h2 class="mt-4">
				<i class="fa-solid fa-location-dot me-2" style="color: #6b336e;"></i>
				Suggested Venues for
				{{ event.name }}
			</h2>

			<form method="get" class="row g-3 my-4 align-items-center position-relative">
				<div class="col-md-3 position-relative city-filter">
					<input type="text" name="city" value="{{ queryCity }}" class="filter-input" placeholder="City">
				</div>

				<!-- Dropdown styled Capacity -->
				<div class="col-md-3 position-relative" style="position: relative;">
					<button type="button" class="dropdown-toggle-custom" id="capacityDropdown">
						Capacity
					</button>
					<div class="dropdown-menu-custom d-none" id="capacityMenu">
						<p class="dropdown-header">Capacity</p>
						<div class="dropdown-item-custom">
							<input type="radio" id="c0" name="capacity" value="0" {% if queryCapacity == 0 %} checked {% endif %}>
							<label for="c0">Any</label>
						</div>
						<div class="dropdown-item-custom">
							<input type="radio" id="c10" name="capacity" value="10" {% if queryCapacity == 10 %} checked {% endif %}>
							<label for="c10">10 or less</label>
						</div>
						<div class="dropdown-item-custom">
							<input type="radio" id="c25" name="capacity" value="25" {% if queryCapacity == 25 %} checked {% endif %}>
							<label for="c25">25 or less</label>
						</div>
						<div class="dropdown-item-custom">
							<input type="radio" id="c50" name="capacity" value="50" {% if queryCapacity == 50 %} checked {% endif %}>
							<label for="c50">50 or less</label>
						</div>
						<div class="dropdown-item-custom">
							<input type="radio" id="c100" name="capacity" value="100" {% if queryCapacity == 100 %} checked {% endif %}>
							<label for="c100">100 or less</label>
						</div>
						<div class="dropdown-item-custom">
							<input type="radio" id="c101" name="capacity" value="101" {% if queryCapacity == 101 %} checked {% endif %}>
							<label for="c101">Over 100</label>
						</div>
						<div class="dropdown-footer">
							<button type="submit" class="dropdown-apply">Apply</button>
							<a href="?city={{ queryCity }}&maxPrice={{ queryMaxPrice }}" class="dropdown-clear">Clear</a>
						</div>
					</div>
				</div>

				<!-- Dropdown styled Price -->
				<div class="col-md-3 position-relative">
					<button type="button" class="dropdown-toggle-custom" id="priceDropdown">Price</button>
					<div class="dropdown-menu-custom d-none" id="priceMenu">
						<p class="dropdown-header">Price</p>

						<div class="dropdown-item-custom">
							<label for="minPrice">Minimum price</label>
							<input type="number" class="filter-input w-100" name="minPrice" id="minPrice" value="{{ queryMinPrice ?? '' }}" min="0">
						</div>

						<div class="dropdown-item-custom mt-2">
							<label for="maxPrice">Maximum price</label>
							<input type="number" class="filter-input w-100" name="maxPrice" id="maxPrice" value="{{ queryMaxPrice ?? '' }}" min="0">
						</div>

						<div class="dropdown-footer mt-3">
							<button type="submit" class="dropdown-apply">Apply</button>
							<a href="?city={{ queryCity }}&capacity={{ queryCapacity }}" class="dropdown-clear">Clear</a>
						</div>
					</div>
				</div>

				{#<div class="col-md-3">
																																	<input type="number" name="maxPrice" value="{{ queryMaxPrice }}" class="filter-input" placeholder="Max Price">
																																</div>#}

				<div class="col-md-3">
					<button class="filter-button w-100">Filter</button>
				</div>
			</form>
	
			<!-- üéØ Venue Cards -->
			<div class="row" id="suggested-results">
				{% include 'location/_suggested_venues_cards.html.twig' %}
			</div>
			<!-- üó∫Ô∏è Map Section -->
			<div class="row mb-5">
    			<div class="col-12">
        			<div id="map" style="width: 100%; height: 500px; border-radius: 12px; box-shadow: 0 0 10px rgba(0,0,0,0.1); margin-bottom: 2rem;"></div>
    			</div>
			</div>

		</div>
		<!-- Weather Modal -->
		<div id="weatherModal" class="custom-modal">
    		<div class="custom-modal-content">
        		<span class="custom-close">&times;</span>
        		<h4 class="mb-3">üå§ Weather Forecast</h4>
        		<div id="weatherModalBody">Loading...</div>
    		</div>
		</div>

	</div>
{% endblock %}
{% block javascripts %}
	{{ parent() }}
	{#PARTIE MAPS#}
	<script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.17.0/maps/maps-web.min.js"></script>

	<script>
function initMap() {
    tt.setProductInfo('3alaKifi', '1.0');
    const map = tt.map({
        key: '{{ tomtomApiKey }}', // <-- Mets ta cl√© TomTom ici
        container: 'map',
        center: [10.1815, 36.8065], // [longitude, latitude]
        zoom: 8,
		language: 'fr-FR' // langue de la carte
    });

    fetch("/locations/suggested/mapdata/{{ event.idEvent }}")
        .then(response => response.json())
        .then(locations => {
            const existingCoords = new Map();

locations.forEach(loc => {
    if (loc.lat && loc.lng) {
        let lat = loc.lat;
        let lng = loc.lng;
        const key = `${lat.toFixed(5)},${lng.toFixed(5)}`;

        // Si les coords existent d√©j√†, on les d√©cale l√©g√®rement
        if (existingCoords.has(key)) {
            const count = existingCoords.get(key) + 1;
            existingCoords.set(key, count);
            const offset = 0.001 * count; // petit d√©calage
            lat += offset;
            lng += offset;
        } else {
            existingCoords.set(key, 0);
        }

        const marker = new tt.Marker()
            .setLngLat([lng, lat])
            .addTo(map);

        const popup = new tt.Popup({ offset: 35 }).setHTML(`
            <div style="text-align:center">
                <h6>${loc.name}</h6>
                <img src="${loc.image}" style="width:100px;height:auto;border-radius:8px;">
                <br/>
                <a href="/locations/${loc.id}">View details</a>
            </div>
        `);

        marker.setPopup(popup);
    }
});

        });
}

</script>
<script>
    window.onload = function () {
        initMap();
    };
</script>


	<script>
		const toggleDropdown = () => {
		const toggleBtn = document.getElementById('capacityDropdown');
		const menu = document.getElementById('capacityMenu');

		if (! toggleBtn || ! menu) 
		return;

		let isOpen = false;

		// ‚úÖ Toggle dropdown on click
		toggleBtn.addEventListener('click', function (e) {
		e.stopPropagation();
		isOpen = ! isOpen;
		menu.classList.toggle('d-none', ! isOpen);
		});

		// ‚úÖ Close on click outside
		document.addEventListener('click', function (e) {
		if (isOpen && ! menu.contains(e.target) && ! toggleBtn.contains(e.target)) {
		isOpen = false;
		menu.classList.add('d-none');
			}
		});
		};

		// ‚úÖ Ex√©cute quand tout est bien charg√©
		window.addEventListener('load', toggleDropdown);

		// Toggle for Price dropdown
		const priceBtn = document.getElementById('priceDropdown');
		const priceMenu = document.getElementById('priceMenu');
		let priceOpen = false;

		priceBtn.addEventListener('click', (e) => {
		e.stopPropagation();
		priceOpen = ! priceOpen;
		priceMenu.classList.toggle('d-none', ! priceOpen);
		});

		document.addEventListener('click', (e) => {
		if (priceOpen && ! priceMenu.contains(e.target) && ! priceBtn.contains(e.target)) {
		priceOpen = false;
		priceMenu.classList.add('d-none');
			}
		});
	</script>

	{#filters ajax#}
	<script>
		function applyFiltersAjax() {
		const params = new URLSearchParams(new FormData(document.querySelector("form")));
		const eventId = {{ event.idEvent }};
		const url = `/locations/suggested/ajax/${eventId}?${
		params.toString()
		}`;

		fetch(url).then(res => res.text()).then(html => {
		document.querySelector('#suggested-results').innerHTML = html;
		 attachWeatherButtons(); // üî• Tr√®s important : r√©attacher le script m√©t√©o apr√®s reload AJAX
		});
		}

		document.querySelectorAll('.filter-input, input[name="capacity"], input[name="minPrice"], input[name="maxPrice"]').forEach(input => {
		input.addEventListener('change', applyFiltersAjax);
		});

		document.querySelectorAll('.dropdown-apply').forEach(btn => {
		btn.addEventListener('click', function (e) {
		e.preventDefault();
		applyFiltersAjax();
		});
		});

		document.querySelector('button.filter-button').addEventListener('click', function (e) {
		e.preventDefault();
		applyFiltersAjax();
		});
	</script>

	{#heart icon stays in "√©tat actif" after click#}
	<script>
	document.addEventListener("DOMContentLoaded", function () {
		document.addEventListener("click", function (e) {
			if (e.target.classList.contains("favorite-icon")) {
				e.target.classList.toggle("active");
			}
		});
	});
</script>
	{#Weather#}
	<script>
function attachWeatherButtons() {
    const modal = document.getElementById('weatherModal');
    const modalBody = document.getElementById('weatherModalBody');
    const closeBtn = modal.querySelector('.custom-close');

    document.querySelectorAll('.btn-weather').forEach(button => {
        button.addEventListener('click', function () {
            const city = this.dataset.city;
            const start = this.dataset.start;
            const end = this.dataset.end;

            modalBody.innerHTML = "Loading...";
            modal.style.display = 'block';

            fetch(`/weather?city=${city}&start=${start}&end=${end}`)
                .then(res => res.json())
                .then(data => {
                    if (data.error) {
                        modalBody.innerHTML = `<p class="text-danger">Error: ${data.error}</p>`;
                        return;
                    }

                    let html = '<div class="d-flex justify-content-center gap-3 flex-wrap">';
                    data.forEach(day => {
                        html += `
                            <div class="text-center">
                                <small>${day.date}</small><br>
                                <img src="${day.icon}" alt="icon"><br>
                                ${day.condition}<br>
                                ${day.temp}¬∞C
                            </div>`;
                    });
                    html += '</div>';

                    modalBody.innerHTML = html;
                })
                .catch(() => {
                    modalBody.innerHTML = `<p class="text-danger">Error loading weather.</p>`;
                });
        });
    });

    closeBtn.onclick = () => {
        modal.style.display = 'none';
    };

    window.onclick = (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    };
}

// D√®s que la page charge pour la premi√®re fois :
document.addEventListener('DOMContentLoaded', function () {
    attachWeatherButtons();
});

</script>


{% endblock %}
